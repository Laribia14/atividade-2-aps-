const express = require('express');
const Reserva = require('../models/reserva');

const router = express.Router();

// Criar uma nova reserva
router.post('/', async (req, res) => {
  const { nome, data, pessoas } = req.body;

  try {
    const novaReserva = new Reserva({ nome, data, pessoas });
    await novaReserva.save();
    res.status(201).json(novaReserva);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Obter todas as reservas
router.get('/', async (req, res) => {
  try {
    const reservas = await Reserva.find();
    res.status(200).json(reservas);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Obter uma reserva por ID
router.get('/:id', async (req, res) => {
  try {
    const reserva = await Reserva.findById(req.params.id);
    if (!reserva) {
      return res.status(404).json({ message: 'Reserva não encontrada' });
    }
    res.status(200).json(reserva);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Atualizar uma reserva por ID
router.put('/:id', async (req, res) => {
  try {
    const { nome, data, pessoas } = req.body;
    const reservaAtualizada = await Reserva.findByIdAndUpdate(req.params.id, { nome, data, pessoas }, { new: true });
    if (!reservaAtualizada) {
      return res.status(404).json({ message: 'Reserva não encontrada' });
    }
    res.status(200).json(reservaAtualizada);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Deletar uma reserva por ID
router.delete('/:id', async (req, res) => {
  try {
    const reservaDeletada = await Reserva.findByIdAndDelete(req.params.id);
    if (!reservaDeletada) {
      return res.status(404).json({ message: 'Reserva não encontrada' });
    }
    res.status(200).json({ message: 'Reserva deletada com sucesso' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
